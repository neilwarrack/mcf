snippet init "Initialize a node" !b
ros::init(argc, argv, "${1:`!v Filename("$1")`}");$0
endsnippet

global !p
def get_level(c):
  levels = ["DEBUG", "INFO", "WARN", "ERROR", "FATAL"]
  for l in levels:
    if l.lower().startswith(c.lower()):
      return l
  return "INFO"
endglobal

snippet "log(\w?)(s?)" "Log message" br
ROS_`!p
snip.rv = get_level(match.group(1) or 'i')
if match.group(2):
  snip.rv += '_STREAM'
`("${1:Message}"`!p
if match.group(2):
  snip.rv = ' << '
`$2);$0
endsnippet

snippet ".par(d?)" "Query parameter from server" !wr
`!p snip.rv = '.param' if match.group(1) else '.getParam'
`("${1:parameter_name}", ${2:$1}${3/.+/, /}${3:default}${3/.+//})$0
endsnippet

snippet sub "Subscriber" !b
ros::Subscriber ${1}_subscriber = ${2:nh}.subscribe("${3:topic}", ${4:10}, ${5:callback}${5/.+?(C?$)/(?1:allback:)/});$0
endsnippet

snippet pub "Publisher" !b
ros::Publisher ${1}_publisher = ${2:nh}.advertise<${3:std_msgs::String}>("${4:topic}", ${5:10});$0
endsnippet

snippet client "Client" !b
ros::ServiceClient ${1}_client = ${2:nh}.serviceClient<${3:std_srvs::Empty}>("${4:topic}");
$3 ${5:srv};
$5.request.${6:/* fill in request parameters */}
endsnippet

snippet dynrec "Dynamic reconfigure template" !b
#include <dynamic_reconfigure/server.h>
#include <$1/$2.h>
void ${4:reconfigureCallback}($1::$2 &config, uint32_t level)
{
  $0
}
dynamic_reconfigure::Server<${1:package}::${2:FooConfig}> ${3:server};
$3.setCallback(boost::bind(&$4, _1, _2));
endsnippet

snippet pn "Private node handle" !b
ros::NodeHandle ${1:pn}("~")$0
endsnippet
