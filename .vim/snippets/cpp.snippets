global !p
from os.path import expanduser, join
import sys; sys.path.append(join(expanduser("~"), ".vim/snippets/helpers"))
from conversions import *
endglobal

snippet enuma "Anonymous enumeration" !b
enum
{
  ${1:ITEM},
};$0
endsnippet

snippet class "Class declaration" !b
class ${1:`!p snip.rv = underscore_to_camelcase(snip.basename) or "Name"`}
{

public:

  ${1/(\w+).*/$1/}(${2});

  virtual ~${1/(\w+).*/$1/}() { };

private:

  $0

};
endsnippet

snippet up "Unique pointer"
std::unique_ptr<${1:${VISUAL:Type}}>$0
endsnippet

snippet sp "Shared pointer"
std::shared_ptr<${1:${VISUAL:Type}}>$0
endsnippet

snippet tdup "Typedef unique pointer" !b
typedef std::unique_ptr<${1:Type}> ${2:UPtr};$0
endsnippet

snippet tdsp "Typedef shared pointer" !b
typedef std::shared_ptr<${1:Type}> ${2:Ptr};$0
endsnippet

snippet for "For loop" !b
for (${3:size_t} ${2:i} = 0; $2 < ${1:count}; $2++)
{
  ${0:/* code */}
}
endsnippet

snippet fori "For loop over iterable" !b
for (const auto& ${1:item} : ${2:items})
{
  ${0:/* code */}
}
endsnippet

snippet car "Const auto reference" !b
const auto& ${1:variable} = $0
endsnippet
