global !p
from os.path import expanduser, join
import sys; sys.path.append(join(expanduser("~"), ".mcf/scripts/library"))
from conversions import *
def get_level(c):
  levels = ["DEBUG", "INFO", "WARN", "ERROR", "FATAL"]
  for l in levels:
    if l.lower().startswith(c.lower()):
      return l
  return "INFO"
endglobal

snippet init "Initialize node" !b
ros::init(argc, argv, "${1:`!v Filename("$1")`}");$0
endsnippet

snippet "log(\w?)(s?)" "Log message" br
ROS_`!p
snip.rv = get_level(match.group(1) or 'i')
if match.group(2):
  snip.rv += '_STREAM'
`("${1:Message}"`!p
if match.group(2):
  snip.rv = ' << '
`$2);$0
endsnippet

snippet ".par(d?)" "Query parameter from server" !wr
`!p snip.rv = '.param' if match.group(1) else '.getParam'
`${4/.+/</}${4:std::string}${4/.+/>/}("${1:parameter_name}", ${2:$1}${3/.+/, /}${3:default}${3/.+//})$0
endsnippet

snippet pub "Publisher" !b
${1/.*?(_?$)/(?1::ros\:\:Publisher )/}${1:publisher} = ${2:nh}${1/.*?(_?$)/(?1:_:)/}.advertise<${3:std_msgs::String}>("${4:topic}", ${5:10});$0
endsnippet

snippet sub "Subscriber" !b
${1/.*?(_?$)/(?1::ros\:\:Subscriber )/}${1:subscriber} = ${2:nh}${1/.*?(_?$)/(?1:_:)/}.subscribe("${3:topic}", ${4:10}, ${5:callback}${5/.+?(C?$)/(?1:allback:)/}${5/(^&?).*/(?1:, this:)/});$0
endsnippet

snippet client "Client" !b
ros::ServiceClient ${1:client} = ${2:nh}.serviceClient<${3:std_srvs::Empty}>("${4:topic}");
$3 ${5:srv};
$5.request.${6:/* fill in request parameters */}
endsnippet

snippet service "Service server" !b
ros::ServiceServer ${1:service} = ${2:nh}.advertiseService("${3:topic}", ${4:callback}${4/.+?(C?$)/(?1:allback:)/}${4/(^&?).*/(?1:, this:)/})$0
endsnippet

snippet dynrec "Dynamic reconfigure template" !b
#include <dynamic_reconfigure/server.h>
#include <$1/$2.h>
void ${4:reconfigureCallback}($1::$2 &config, uint32_t level)
{
  $0
}
dynamic_reconfigure::Server<${1:package}::${2:FooConfig}> ${3:server};
$3.setCallback(boost::bind(&$4, _1, _2));
endsnippet

snippet pn "Private node handle" !b
ros::NodeHandle ${1:pn}("~")$0
endsnippet

snippet nh "Node handle" !b
ros::NodeHandle ${1:nh}$0
endsnippet

snippet now "Current time"
ros::Time::now()
endsnippet

snippet cb "Callback" !b
void ${1:callback}(const ${2:std_msg::String}ConstPtr& ${3:msg})
{
  $0
}
endsnippet

snippet node "Node class declaration" !b
class ${1:`!p snip.rv = snakecase_to_camelcase(snip.basename) + "Node"`}
{

public:

  ${1/(\w+).*/$1/}(${2})
  {
    $0
  }

private:

  ros::NodeHandle nh_;

};
endsnippet

