#!/usr/bin/env python2
# encoding: utf-8

from __future__ import print_function

import os
import re
import pwd
import sys
import time
import signal
import imaplib
from subprocess import Popen, PIPE
from contextlib import contextmanager

try:
    from systemd.journal import send as log
except ImportError:
    def log(message):
        pass


import keyring


class TimeoutException(Exception):
    pass


class PasswordException(Exception):
    pass


@contextmanager
def timeout(seconds):
    def signal_handler(signum, frame):
        raise TimeoutException
    signal.signal(signal.SIGALRM, signal_handler)
    signal.alarm(seconds)
    try:
        yield
    finally:
        signal.alarm(0)


REGEX = re.compile(r'X-GM-THRID (\d+) UID')

SolarizedRed="#dc322f"
SolarizedOrange="#cb4b16"
SolarizedBase3="#fdf6e3"


def color(text, fg, bg=None):
    fmt = unicode('<fc={}{}>{}</fc>', 'utf-8')
    bg = ',' + bg if bg is not None else ''
    return fmt.format(fg, bg, text)


def symbol(name):
    return {'mail': unicode('ïŠ‡', 'utf-8')}[name]


def retry(timeout, attempts, recovery=None):
    def decorator(function):
        def function_retry(*args, **kwargs):
            tries = attempts
            while tries > 0:
                try:
                    return function(*args, **kwargs)
                except:
                    tries -= 1
                    if recovery:
                        recovery()
                    time.sleep(timeout)
            return None
        return function_retry
    return decorator


class Gmail(object):

    def __init__(self):
        user = pwd.getpwuid(os.getuid()).pw_name
        passwd = keyring.get_password('liamg', user)
        if passwd is None:
            raise PasswordException('Gmail password is not stored in keyring')
        self.imap = imaplib.IMAP4_SSL('imap.gmail.com', '993')
        self.imap.login('alexandrov88@gmail.com', passwd)
        self.imap.select()
        log('Established connection with GMail IMAP server')

    def close(self):
        self.imap.close()
        self.imap.logout()
        log('Closed connection with GMail IMAP server')

    def get_unread_count(self):
        self.imap.select()
        uids = self.imap.uid('search', None, 'UnSeen')[1][0].decode().split()
        if not uids:
            return 0
        query = ','.join(uids).encode('utf-8')
        items = [t.decode() for t in self.imap.uid('fetch', query, '(X-GM-THRID)')[1]]
        tids = REGEX.findall(' '.join(items))
        return len(set(tids))


CHECK_INTERVAL = 10
PIPE_NAME = '/tmp/gmail'
old_unread = -1

if not os.path.exists(PIPE_NAME):
    os.mkfifo(PIPE_NAME)
    # os.unlink(PIPE_NAME)
pipe = os.open(PIPE_NAME, os.O_RDWR)


def make_indicator(unread_count):
    if unread_count:
        out = unicode(' ', 'utf-8')
        out += symbol('mail')
        out += ' '
        out += unicode(str(unread), 'utf-8')
        out += ' '
        return color(out, SolarizedBase3, SolarizedOrange)
    return ''


while True:
    try:
        gmail = Gmail()
        while True:
            sys.stdout.write('<')
            sys.stdout.flush()
            with timeout(CHECK_INTERVAL):
                unread = gmail.get_unread_count()
            sys.stdout.write(str(unread))
            sys.stdout.write('>')
            sys.stdout.flush()
            out = (make_indicator(unread) + '\n').encode('utf-8')
            if unread != old_unread:
                old_unread = unread
                for i in range(12):
                    os.write(pipe, out)
                    time.sleep(0.05)
            os.write(pipe, out)
            time.sleep(CHECK_INTERVAL)
    except PasswordException:
        log('No password in the keyring, will exit now')
        sys.exit()
    except TimeoutException:
        log('Communication timeout, will wait and reconnect')
    except Exception as e:
        log('Exception: {}'.format(e))
    time.sleep(CHECK_INTERVAL)

os.close(pipe)
